Index: src/com/bridgelabz/addressbook/AddressBook.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.bridgelabz.addressbook;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Comparator;\r\nimport java.util.HashMap;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Scanner;\r\nimport java.util.stream.Collectors;\r\n\r\n\r\npublic class AddressBook {\r\n    static ArrayList<Contact> contactDetails = new ArrayList();\r\n    static Scanner sc = new Scanner(System.in);\r\n    static HashMap<String, ArrayList<Contact>> hashmap = new HashMap<>();\r\n\r\n    public static void addressBook(AddressBook operations) {\r\n        int select;\r\n        do {\r\n            System.out.println(\"\"\"\r\n                    Select the Choice:\r\n                    1. Add Address Book\\s\r\n                    2. Search Contact by State\r\n                    3. Search Contact by City\r\n                    4. Count by City\r\n                    5. Count by State\r\n                    6. Sorted Contacts\r\n                    7. exit\"\"\");\r\n            int ch = sc.nextInt();\r\n            switch (ch) {\r\n                case 1:\r\n                    int selection;\r\n                    do {\r\n                        System.out.println(\"Enter Name For Address Book\");\r\n                        String AddressBookName = sc.next();\r\n//                contactsDetails.add(AddressBookName);\r\n                        if (hashmap.containsKey(AddressBookName)) {\r\n                            System.out.println(\"The AddressBook already contains\");\r\n                            break;\r\n                        } else {\r\n                            ArrayList<Contact> contactDetails1 = new ArrayList<>();\r\n                            menuChoose(operations, contactDetails1);\r\n                            hashmap.put(AddressBookName, contactDetails1);\r\n                        }\r\n                        System.out.println(\"AddressBook Added\" + hashmap + \" \");\r\n                        System.out.println(\"\"\"\r\n                                1. Add New Address Book\\s\r\n                                2. Search Contact by State\r\n                                3. Search Contact by City\r\n                                4. Count by City\r\n                                5. Count by State\r\n                                6. Sorted Contacts\\s\r\n                                7. exit\"\"\");\r\n                        selection = sc.nextInt();\r\n                    } while (selection == 1);\r\n                case 2:\r\n                    searchByState();\r\n                    break;\r\n                case 3:\r\n                    searchByCity();\r\n                    break;\r\n                case 4:\r\n                    countByCity();\r\n                    break;\r\n                case 5:\r\n                    countByState();\r\n                    break;\r\n                case 6:\r\n                    System.out.println(\"Sorted Contacts Alphabetically:\");\r\n                    sortConatct(hashmap);\r\n                    break;\r\n                default:\r\n            }\r\n            select = sc.nextInt();\r\n        } while (select == 1);\r\n\r\n    }\r\n\r\n    //    private static List<Contacts> SearchInMultipleBook(String name) {\r\n//        for (Map.Entry<String, ArrayList<Contacts>> entry : hashmap.entrySet()) {\r\n//            for (Contacts contacts : entry.getValue()) {\r\n//                if (contacts.getCity().equals(name) || contacts.getState().equals(name)) {\r\n//                    System.out.println(\"\\nAddress Book Name :\" + entry.getKey());\r\n//                    System.out.println(\"First Name :\" + contacts.getFirstName());\r\n//                    System.out.println(\"Last Name :\" + contacts.getLastName());\r\n//                    System.out.println(\"Email-ID :\" + contacts.getEmail());\r\n//                    System.out.println(\"Address :\" + contacts.getAddress());\r\n//                    System.out.println(\"City Name :\" + contacts.getCity());\r\n//                    System.out.println(\"Contact Number :\" + contacts.getContactNo());\r\n//                }\r\n//            }\r\n//        }\r\n//        System.out.printf(\"No record found:\");\r\n//        return null;\r\n//    }\r\n    // Using Java Stream\r\n    public static void searchByCity() {\r\n        System.out.println(\"Enter city Name:\");\r\n        String city = sc.next();\r\n        contactDetails.stream().filter(contacts -> contacts.getCity().equalsIgnoreCase(city))\r\n                .forEach(System.out::println);\r\n    }\r\n\r\n    public static void searchByState() {\r\n        System.out.println(\"Enter State Name:\");\r\n        String state = sc.next();\r\n        contactDetails.stream().filter(contacts -> contacts.getState().equalsIgnoreCase(state))\r\n                .forEach(System.out::println);\r\n    }\r\n\r\n    public static void countByCity() {\r\n        System.out.println(\"Enter the city Name:\");\r\n        String city = sc.next();\r\n        contactDetails.stream().filter(contacts -> contacts.getCity().equalsIgnoreCase(city))\r\n                .forEach(System.out::println);\r\n        long count = contactDetails.stream().filter(n -> n.getCity().equalsIgnoreCase(city)).count();\r\n        System.out.println(\"Total number of Persons in city \" + city + \":\" + count);\r\n    }\r\n\r\n    public static void countByState() {\r\n        System.out.println(\"Enter the State Name:\");\r\n        String state = sc.next();\r\n        contactDetails.stream().filter(contacts -> contacts.getState().equalsIgnoreCase(state))\r\n                .forEach(System.out::println);\r\n        long count = contactDetails.stream().filter(n -> n.getState().equalsIgnoreCase(state)).count();\r\n        System.out.println(\"Total number of Persons in city \" + state + \":\" + count);\r\n    }\r\n\r\n    public static void sortConatct(HashMap<String, ArrayList<Contact>> multipleAddressBook) {\r\n        for (Map.Entry<String, ArrayList<Contact>> personSorted : multipleAddressBook.entrySet()) {\r\n            List<Contact> sortedContacts;\r\n            sortedContacts = personSorted.getValue().stream()\r\n                    .sorted(Comparator.comparing(contacts -> contacts.getFirstName() + contacts.getLastName()))\r\n                    .collect(Collectors.toList());\r\n            System.out.println(\"Sorted Contacts By Name : \");\r\n            for (Contact item : sortedContacts) {\r\n                System.out.println(item.toString());\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void addDetails(ArrayList<Contact> contactsDetails) {\r\n        Contact info = new Contact();\r\n        if (contactsDetails.size() == 0) {\r\n            System.out.println(\"Enter the First Name\");\r\n            info.setFirstName(sc.next());\r\n            System.out.println(\"Enter the Last Name\");\r\n            info.setLastName(sc.next());\r\n            System.out.println(\"Enter the Address\");\r\n            info.setAddress(sc.next());\r\n            System.out.println(\"Enter the city\");\r\n            info.setCity(sc.next());\r\n            System.out.println(\"Enter the State\");\r\n            info.setState(sc.next());\r\n            System.out.println(\"Enter the your zip Code\");\r\n            info.setZip(sc.next());\r\n            System.out.println(\"Enter the Contact Number\");\r\n            info.setContactNo(sc.next());\r\n            System.out.println(\"Enter the Email Id\");\r\n            info.setEmail(sc.next());\r\n            contactsDetails.add(info);\r\n            System.out.println(\"Contact details added\");\r\n        } else {\r\n            System.out.println(\"Enter first name\");\r\n            String firstName = sc.next();\r\n\r\n            for (Contact contacts : contactsDetails) {\r\n                if (contacts.getFirstName().equals(firstName)) {\r\n                    System.out.println(\"The Name is already present.\");\r\n                    AddressBook.addDetails(contactsDetails);\r\n                }\r\n            }\r\n            System.out.println(\"Re-enter first name\");\r\n            info.setFirstName(sc.next());\r\n            System.out.println(\"Enter Last Name\");\r\n            info.setLastName(sc.next());\r\n            System.out.println(\"Enter contact Number:\");\r\n            info.setContactNo(sc.next());\r\n            System.out.println(\"Enter Email: \");\r\n            info.setEmail(sc.next());\r\n            System.out.println(\"Enter Address: \");\r\n            info.setAddress(sc.next());\r\n            System.out.println(\"Enter City Name: \");\r\n            info.setCity(sc.next());\r\n            System.out.println(\"Enter State: \");\r\n            info.setState(sc.next());\r\n            System.out.println(\"Enter Zip Code:\");\r\n            info.setZip(sc.next());\r\n            contactsDetails.add(info);\r\n        }\r\n    }\r\n\r\n    public void displayContacts(ArrayList<Contact> contactDetails) {\r\n        for (Contact contactDetailsValue : contactDetails) {\r\n            System.out.println(contactDetailsValue);\r\n            System.out.println(\"---------------------------\");\r\n        }\r\n    }\r\n\r\n    public void editDetails() {\r\n        System.out.println(\"Enter the first name you want to edit \");\r\n        String searchFirstName = sc.next();\r\n        for (Contact contact : AddressBook.contactDetails) {\r\n            String name = contact.getFirstName();\r\n            System.out.println(name);\r\n            if (name.equals(searchFirstName)) {\r\n                System.out.println(\"\"\"\r\n                        1. First Name\\s\r\n                        2. Last Name\\s\r\n                        3. Address\\s\r\n                        4. City\\s\r\n                        5. State\\s\r\n                        6. Zip Code\\s\r\n                        7. Contact No\\s\r\n                        8. Email\"\"\");\r\n                System.out.println(\"Enter value to update: \");\r\n                int num = sc.nextInt();\r\n                switch (num) {\r\n                    case 1 -> {\r\n                        System.out.println(\"Enter the first name You want to update\");\r\n                        String updatedFirstName = sc.next();\r\n                        contact.setFirstName(updatedFirstName);\r\n                    }\r\n\r\n                    case 2 -> {\r\n                        System.out.println(\"Enter the Last NAme You want to update\");\r\n                        String updatedLastName = sc.next();\r\n                        contact.setLastName(updatedLastName);\r\n                    }\r\n                    case 3 -> {\r\n                        System.out.println(\"Enter the Address You want to update\");\r\n                        String updatedAddress = sc.next();\r\n                        contact.setAddress(updatedAddress);\r\n                    }\r\n                    case 4 -> {\r\n                        System.out.println(\"Enter the City You want to update\");\r\n                        String updatedCity = sc.next();\r\n                        contact.setCity(updatedCity);\r\n                    }\r\n                    case 5 -> {\r\n                        System.out.println(\"Enter the State You want to update\");\r\n                        String updatedState = sc.next();\r\n                        contact.setState(updatedState);\r\n                    }\r\n                    case 6 -> {\r\n                        System.out.println(\"Enter the Zip code You want to update\");\r\n                        String updatedZipCode = sc.next();\r\n                        contact.setZip(updatedZipCode);\r\n                    }\r\n                    case 7 -> {\r\n                        System.out.println(\"Enter the Contact numberYou want to update\");\r\n                        String updatedContact = sc.next();\r\n                        contact.setContactNo(updatedContact);\r\n                    }\r\n                    case 8 -> {\r\n                        System.out.println(\"Enter the email You want to update\");\r\n                        String updatedEmail = sc.next();\r\n                        contact.setEmail(updatedEmail);\r\n                    }\r\n                    default -> System.out.println(\"Invalid number!\");\r\n                }\r\n                System.out.println(\"details updated\");\r\n            } else\r\n                System.out.println(\"No record found!\");\r\n        }\r\n    }\r\n\r\n    public void deleteContact() {\r\n        System.out.println(\"Enter First Name for which you want to delete contact: \");\r\n        String firstname = sc.next();\r\n        Iterator<Contact> removeContact = AddressBook.contactDetails.iterator();\r\n\r\n        while (removeContact.hasNext()) {\r\n            Contact nextElement = removeContact.next();\r\n            if (nextElement.getFirstName().equals(firstname)) {\r\n                removeContact.remove();\r\n                System.out.println(\"Contact is removed!\");\r\n                break;\r\n            } else {\r\n                System.out.println(\"Contact not found.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void menuChoose(AddressBook operations, ArrayList<Contact> contactDetails) {\r\n        Scanner sc = new Scanner(System.in);\r\n        int chooseNumber;\r\n        do {\r\n            System.out.println(\"Enter the number that you want to choose to perform the certain task\");\r\n            System.out.println(\"1. Add Details \\n2. Edit Details \\n3. Delete Details \\n4. Display Details \\n5. exit \");\r\n            chooseNumber = sc.nextInt();\r\n\r\n            switch (chooseNumber) {\r\n                case 1 -> {\r\n                    System.out.println(\"Add Details\");\r\n                    addDetails(contactDetails);\r\n                }\r\n                case 2 -> {\r\n                    System.out.println(\"Edit details\");\r\n                    operations.editDetails();\r\n                }\r\n                case 3 -> {\r\n                    System.out.println(\"Delete Details\");\r\n                    operations.deleteContact();\r\n                }\r\n                case 4 -> {\r\n                    System.out.println(\"Display details\");\r\n                    operations.displayContacts(contactDetails);\r\n                }\r\n                case 5 -> System.out.println(\"Exit\");\r\n                default -> System.out.println(\"invalid Option choose\");\r\n            }\r\n        } while (chooseNumber != 5);\r\n    }\r\n\r\n}\r\n\r\n    // display method view by options\r\n    public static void viewByOption() {\r\n        Scanner sc = new Scanner(System.in);\r\n        System.out.println(\"1. View By name\");\r\n        System.out.println(\"2. View By city\");\r\n        System.out.println(\"3. View By state\");\r\n        System.out.println(\"4. Back\");\r\n        System.out.print(\"Enter Your choice: \");\r\n        int choice = sc.nextInt();\r\n        sc.nextLine();\r\n        switch (choice) {\r\n            case 1:\r\n                viewByName(nameHashMap);\r\n                break;\r\n            case 2:\r\n                viewByCity(cityHashMap);\r\n                break;\r\n            case 3:\r\n                viewByState(stateHashMap);\r\n                break;\r\n            case 4:\r\n                return;\r\n            default:\r\n                System.out.println(\"INVALID CHOICE!\");\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/com/bridgelabz/addressbook/AddressBook.java b/src/com/bridgelabz/addressbook/AddressBook.java
--- a/src/com/bridgelabz/addressbook/AddressBook.java	(revision 23ecbff632e3e1e5f4d3aac967643bad9f2f67cc)
+++ b/src/com/bridgelabz/addressbook/AddressBook.java	(date 1666094558356)
@@ -314,7 +314,7 @@
         } while (chooseNumber != 5);
     }
 
-}
+
 
     // display method view by options
     public static void viewByOption() {
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1666093015318)
+++ b/.idea/modules.xml	(date 1666093015318)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/address-book.iml" filepath="$PROJECT_DIR$/address-book.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
new file mode 100644
--- /dev/null	(date 1666094041629)
+++ b/.idea/workspace.xml	(date 1666094041629)
@@ -0,0 +1,263 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ChangeListManager">
+    <list default="true" id="cba94b62-30d6-40a0-8a57-f34ba2b29e3d" name="Changes" comment="[Himanshu] : added code to search a person through name, city or state across multiple addressbook">
+      <change afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/modules.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/vcs.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/address-book.iml" afterDir="false" />
+    </list>
+    <option name="SHOW_DIALOG" value="false" />
+    <option name="HIGHLIGHT_CONFLICTS" value="true" />
+    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
+    <option name="LAST_RESOLUTION" value="IGNORE" />
+  </component>
+  <component name="FileTemplateManagerImpl">
+    <option name="RECENT_TEMPLATES">
+      <list>
+        <option value="Class" />
+      </list>
+    </option>
+  </component>
+  <component name="Git.Settings">
+    <option name="RECENT_BRANCH_BY_REPOSITORY">
+      <map>
+        <entry key="$PROJECT_DIR$" value="UC10_Count_by_city_or_state" />
+      </map>
+    </option>
+    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+  </component>
+  <component name="MarkdownSettingsMigration">
+    <option name="stateVersion" value="1" />
+  </component>
+  <component name="ProjectId" id="2G8gavOBdIrgR8X8LQYZz9bFJG2" />
+  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
+    <ConfirmationsSetting value="1" id="Add" />
+  </component>
+  <component name="ProjectViewState">
+    <option name="hideEmptyMiddlePackages" value="true" />
+    <option name="showLibraryContents" value="true" />
+  </component>
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;last_opened_file_path&quot;: &quot;E:/JAVA BL/Address Book&quot;,
+    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,
+    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,
+    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;
+  }
+}</component>
+  <component name="RunManager" selected="Application.AddressBookMain">
+    <configuration name="AddressBook" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="com.bridgelabz.addressbook.AddressBook" />
+      <module name="address-book" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="com.bridgelabz.addressbook.*" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <configuration name="AddressBookMain" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="com.bridgelabz.addressbook.AddressBookMain" />
+      <module name="address-book" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="com.bridgelabz.addressbook.*" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <configuration name="AddressBookMainn" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="com.bridgelabz.addressbook.AddressBookMainn" />
+      <module name="address-book" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="com.bridgelabz.addressbook.*" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <configuration name="com.bridgelabz.addressbook.AddressBook" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="MAIN_CLASS_NAME" value="com.bridgelabz.addressbook.AddressBook" />
+      <module name="address-book" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="com.bridgelabz.addressbook.*" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <recent_temporary>
+      <list>
+        <item itemvalue="Application.AddressBookMain" />
+        <item itemvalue="Application.AddressBook" />
+        <item itemvalue="Application.AddressBookMain" />
+        <item itemvalue="Application.AddressBook" />
+        <item itemvalue="Application.AddressBookMain" />
+      </list>
+    </recent_temporary>
+  </component>
+  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
+  <component name="TaskManager">
+    <task active="true" id="Default" summary="Default task">
+      <changelist id="cba94b62-30d6-40a0-8a57-f34ba2b29e3d" name="Changes" comment="" />
+      <created>1665775695053</created>
+      <option name="number" value="Default" />
+      <option name="presentableId" value="Default" />
+      <updated>1665775695053</updated>
+    </task>
+    <task id="LOCAL-00001" summary="[Himanshu] : Initial Commit">
+      <created>1665776206864</created>
+      <option name="number" value="00001" />
+      <option name="presentableId" value="LOCAL-00001" />
+      <option name="project" value="LOCAL" />
+      <updated>1665776206864</updated>
+    </task>
+    <task id="LOCAL-00002" summary="[Himanshu] : Created an AddressBook">
+      <created>1665776288826</created>
+      <option name="number" value="00002" />
+      <option name="presentableId" value="LOCAL-00002" />
+      <option name="project" value="LOCAL" />
+      <updated>1665776288826</updated>
+    </task>
+    <task id="LOCAL-00003" summary="[Himanshu] : refactored the code to add a contact to AddressBook">
+      <created>1665776745087</created>
+      <option name="number" value="00003" />
+      <option name="presentableId" value="LOCAL-00003" />
+      <option name="project" value="LOCAL" />
+      <updated>1665776745087</updated>
+    </task>
+    <task id="LOCAL-00004" summary="[Himanshu] : Refactored the code to edit a contact">
+      <created>1665777061478</created>
+      <option name="number" value="00004" />
+      <option name="presentableId" value="LOCAL-00004" />
+      <option name="project" value="LOCAL" />
+      <updated>1665777061478</updated>
+    </task>
+    <task id="LOCAL-00005" summary="[Himanshu] : added code to delete a contact using first name">
+      <created>1665777493684</created>
+      <option name="number" value="00005" />
+      <option name="presentableId" value="LOCAL-00005" />
+      <option name="project" value="LOCAL" />
+      <updated>1665777493684</updated>
+    </task>
+    <task id="LOCAL-00006" summary="[Himanshu] : added code to add multiple person to AddressBook">
+      <created>1665777910627</created>
+      <option name="number" value="00006" />
+      <option name="presentableId" value="LOCAL-00006" />
+      <option name="project" value="LOCAL" />
+      <updated>1665777910627</updated>
+    </task>
+    <task id="LOCAL-00007" summary="[Himanshu] : refactored code to add multiple addressbook">
+      <created>1665778856415</created>
+      <option name="number" value="00007" />
+      <option name="presentableId" value="LOCAL-00007" />
+      <option name="project" value="LOCAL" />
+      <updated>1665778856416</updated>
+    </task>
+    <task id="LOCAL-00008" summary="[Himanshu] :  added code to ensure no Duplicate entry of the same person in particular Addressbook">
+      <created>1665779493882</created>
+      <option name="number" value="00008" />
+      <option name="presentableId" value="LOCAL-00008" />
+      <option name="project" value="LOCAL" />
+      <updated>1665779493882</updated>
+    </task>
+    <task id="LOCAL-00009" summary="[Himanshu] : added code to search a person through name, city or state across multiple addressbook">
+      <created>1665942337551</created>
+      <option name="number" value="00009" />
+      <option name="presentableId" value="LOCAL-00009" />
+      <option name="project" value="LOCAL" />
+      <updated>1665942337551</updated>
+    </task>
+    <task id="LOCAL-00010" summary="[Himanshu] : added code to display a person by name city or state">
+      <created>1665943658801</created>
+      <option name="number" value="00010" />
+      <option name="presentableId" value="LOCAL-00010" />
+      <option name="project" value="LOCAL" />
+      <updated>1665943658801</updated>
+    </task>
+    <task id="LOCAL-00011" summary="[Himanshu] : added code to display a person by name city or State">
+      <created>1665944588796</created>
+      <option name="number" value="00011" />
+      <option name="presentableId" value="LOCAL-00011" />
+      <option name="project" value="LOCAL" />
+      <updated>1665944588796</updated>
+    </task>
+    <task id="LOCAL-00012" summary="[Himanshu] : added code for sort alphabetically">
+      <created>1665945729327</created>
+      <option name="number" value="00012" />
+      <option name="presentableId" value="LOCAL-00012" />
+      <option name="project" value="LOCAL" />
+      <updated>1665945729327</updated>
+    </task>
+    <task id="LOCAL-00013" summary="[Himanshu] : added code to search a person through name, city or state across multiple addressbook">
+      <created>1666093121860</created>
+      <option name="number" value="00013" />
+      <option name="presentableId" value="LOCAL-00013" />
+      <option name="project" value="LOCAL" />
+      <updated>1666093121860</updated>
+    </task>
+    <task id="LOCAL-00014" summary="[Himanshu] : added code to search a person through name, city or state across multiple addressbook">
+      <created>1666093717053</created>
+      <option name="number" value="00014" />
+      <option name="presentableId" value="LOCAL-00014" />
+      <option name="project" value="LOCAL" />
+      <updated>1666093717053</updated>
+    </task>
+    <option name="localTasksCounter" value="15" />
+    <servers />
+  </component>
+  <component name="Vcs.Log.Tabs.Properties">
+    <option name="TAB_STATES">
+      <map>
+        <entry key="MAIN">
+          <value>
+            <State>
+              <option name="FILTERS">
+                <map>
+                  <entry key="branch">
+                    <value>
+                      <list>
+                        <option value="UC9_View_Person" />
+                      </list>
+                    </value>
+                  </entry>
+                </map>
+              </option>
+            </State>
+          </value>
+        </entry>
+      </map>
+    </option>
+  </component>
+  <component name="VcsManagerConfiguration">
+    <MESSAGE value="[Himanshu] : Initial Commit" />
+    <MESSAGE value="[Himanshu] : Created an AddressBook" />
+    <MESSAGE value="[Himanshu] : refactored the code to add a contact to AddressBook" />
+    <MESSAGE value="[Himanshu] : Refactored the code to edit a contact" />
+    <MESSAGE value="[Himanshu] : added code to delete a contact using first name" />
+    <MESSAGE value="[Himanshu] : added code to add multiple person to AddressBook" />
+    <MESSAGE value="[Himanshu] : refactored code to add multiple addressbook" />
+    <MESSAGE value="[Himanshu] :  added code to ensure no Duplicate entry of the same person in particular Addressbook" />
+    <MESSAGE value="[Himanshu] : added code to display a person by name city or state" />
+    <MESSAGE value="[Himanshu] : added code to display a person by name city or State" />
+    <MESSAGE value="[Himanshu] : added code for sort alphabetically" />
+    <MESSAGE value="[Himanshu] : added code to search a person through name, city or state across multiple addressbook" />
+    <option name="LAST_COMMIT_MESSAGE" value="[Himanshu] : added code to search a person through name, city or state across multiple addressbook" />
+  </component>
+</project>
\ No newline at end of file
Index: address-book.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/address-book.iml b/address-book.iml
new file mode 100644
--- /dev/null	(date 1666093015345)
+++ b/address-book.iml	(date 1666093015345)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1666093015398)
+++ b/.idea/vcs.xml	(date 1666093015398)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1666093015373)
+++ b/.idea/misc.xml	(date 1666093015373)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_16" default="true" project-jdk-name="16" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
